// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Users {
    id              String    @id @default(uuid())
    namaSiswa       String
    username        String    @db.VarChar(8)
    email           String
    password        String    @db.VarChar(255)
    nisn            String    @db.VarChar(11)
    profileImage    String?   @db.VarChar(255)
    role            Roles     @default(Siswa)
    emailVerifiedAt DateTime?
    createdAt       DateTime  @default(now())

    madings   Madings[]
    Comments  Comments[]
    Bookmarks Bookmarks[]
    Likes     Likes[]

    @@unique([id, username, email, nisn, createdAt])
}

model Madings {
    id          Int        @id @default(autoincrement())
    authorId    String
    title       String     @db.VarChar(100)
    slug        String     @db.VarChar(255)
    description String     @db.Text
    thumbnail   String     @db.VarChar(255)
    article     String     @db.Text
    approved    Boolean    @default(false)
    priority    Priorities
    categoryId  Int
    createdAt   DateTime   @default(now())
    publishedAt DateTime?

    category  Categories  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    author    Users       @relation(fields: [authorId], references: [id], onDelete: Cascade)
    comments  Comments[]
    bookmarks Bookmarks[]
    analytics Analytics?
    Likes     Likes[]

    @@unique([id, title, slug, createdAt])
    @@index([authorId])
    @@index([categoryId])
}

model Comments {
    id       Int    @id @default(autoincrement())
    userId   String
    madingId Int
    comment  String @db.Text

    user   Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
    mading Madings @relation(fields: [madingId], references: [id], onDelete: Cascade)
}

model Likes {
    userId    String
    madingId  Int
    createdAt DateTime @default(now())

    user   Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
    mading Madings @relation(fields: [madingId], references: [id], onDelete: Cascade)

    @@id([userId, madingId, createdAt])
    @@index([userId])
    @@index([madingId])
}

model Bookmarks {
    userId    String
    madingId  Int
    createdAt DateTime @default(now())

    user   Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
    mading Madings @relation(fields: [madingId], references: [id], onDelete: Cascade)

    @@id([userId, madingId, createdAt])
    @@index([userId])
    @@index([madingId])
}

model Categories {
    id        Int       @id @default(autoincrement())
    name      String    @db.VarChar(30)
    createdAt DateTime  @default(now())
    Madings   Madings[]

    @@unique([name, createdAt])
}

model Analytics {
    id        Int    @id @default(autoincrement())
    views     BigInt @default(0) @db.UnsignedBigInt
    bookmarks BigInt @default(0) @db.UnsignedBigInt
    madingId  Int

    madings Madings @relation(fields: [madingId], references: [id], onDelete: Cascade)

    @@unique([madingId])
}

enum Priorities {
    Normal
    Important
}

enum Roles {
    Siswa
    Penulis
    Admin
}
